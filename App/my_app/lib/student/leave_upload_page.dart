import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:my_app/components/button.dart';
import 'package:my_app/components/custom_appbar.dart';
import 'package:my_app/student/approval_detail_page.dart';

class LeaveUploadPage extends StatefulWidget {
  const LeaveUploadPage({super.key});

  @override
  State<LeaveUploadPage> createState() => _LeaveUploadPageState();
}

class _LeaveUploadPageState extends State<LeaveUploadPage> {
  final _formKey = GlobalKey<FormState>();
  String? _leaveType; // "‡∏•‡∏≤‡∏Å‡∏¥‡∏à" | "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢"
  DateTime? _date;
  final _noteCtrl = TextEditingController();
  PlatformFile? _picked;
  bool _submitting = false;

  // ===== Theme tokens =====
  static const _borderBlue = Color(0xFFA6CAFA);
  static const _chevronGrey = Color(0xFF6B7280);
  static const _ink = Color(0xFF1F2937);
  static const _hintGrey = Color(0xFF9CA3AF);
  static const _greenText = Color(0xFF16A34A);

  @override
  void dispose() {
    _noteCtrl.dispose();
    super.dispose();
  }

  Future<void> _pickFile() async {
    final res = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowMultiple: false,
      withData: true, // ‚úÖ ‡∏Ç‡∏≠ bytes ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ
      allowedExtensions: const ['pdf', 'jpeg', 'png', 'jpg'],
    );
    if (res != null && res.files.isNotEmpty) {
      setState(() => _picked = res.files.single);
    }
  }

  Future<void> _pickDate() async {
    final now = DateTime.now();
    final first = DateTime(now.year - 1, 1, 1);
    final last = DateTime(now.year + 1, 12, 31);
    final d = await showDatePicker(
      context: context,
      initialDate: _date ?? now,
      firstDate: first,
      lastDate: last,
      helpText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤',
      confirmText: '‡∏ï‡∏Å‡∏•‡∏á',
      cancelText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      locale: const Locale('th', 'TH'),

      // üé® ‡πÉ‡∏ä‡πâ‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏ü‡πâ‡∏≤
      builder: (context, child) {
        final base = Theme.of(context);
        return Theme(
          data: base.copyWith(
            colorScheme: const ColorScheme.light(
              primary: Color(0xFF4A86E8), // ‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏° (‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
              onPrimary: Colors.white, // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ö‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°
              surface: Color.fromARGB(
                255,
                255,
                255,
                255,
              ), // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á dialog (‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô)
              onSurface: Color(0xFF1F2937), // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
            ),
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                foregroundColor: Color(0xFF4A86E8), // ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏Å‡∏•‡∏á / ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                textStyle: const TextStyle(fontWeight: FontWeight.w600),
              ),
            ),
            datePickerTheme: const DatePickerThemeData(
              headerBackgroundColor: Color(0xFF4A86E8), // ‡∏´‡∏±‡∏ß‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ)
              headerForegroundColor: Colors.white, // ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ö‡∏ô‡∏´‡∏±‡∏ß
              todayForegroundColor: MaterialStatePropertyAll(Color(0xFF4A86E8)),
              todayBackgroundColor: MaterialStatePropertyAll(Color(0x204A86E8)),
              rangePickerBackgroundColor: Color(0xFFFFFFFF),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.all(Radius.circular(16)),
              ),
            ),
            dialogBackgroundColor: const Color(0xFFFFFFFF),
          ),
          child: child!,
        );
      },
    );
    if (d != null) setState(() => _date = d);
  }

  String _formatDate(DateTime d) =>
      '${d.year.toString().padLeft(4, '0')}-${d.month.toString().padLeft(2, '0')}-${d.day.toString().padLeft(2, '0')}';

  Future<void> _submit() async {
    if (_leaveType == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤')));
      return;
    }
    if (_date == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤')));
      return;
    }
    if (_picked == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå')));
      return;
    }

    setState(() => _submitting = true);
    await Future<void>.delayed(const Duration(milliseconds: 300));
    if (!mounted) return;

    // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° payload ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ detail
    final item = <String, dynamic>{
      "date": _formatDate(_date!), // ‡πÄ‡∏ä‡πà‡∏ô 2025-08-01
      "subject": "‡πÉ‡∏ö‡∏•‡∏≤", // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤/‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      "status": "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      "students": "", // ‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
      "leaveType": _leaveType!,
      "reason": _noteCtrl.text,
      "fileName": _picked!.name,
      "filePath": _picked!.path, // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å path
      "fileBytes": _picked!.bytes, // ‚úÖ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ bytes ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏ö‡∏≤‡∏á‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°)
    };

    // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
    await Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => ApprovalDetailPage(item: item)),
    );

    // (option) ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    if (!mounted) return;
    setState(() {
      _leaveType = null;
      _date = null;
      _picked = null;
      _noteCtrl.clear();
      _submitting = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final dateText = _date == null ? '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' : _formatDate(_date!);

    return Scaffold(
      appBar: const CustomAppBar(title: '‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏≤'),
      backgroundColor: const Color(0xFFFFFFFF),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.fromLTRB(16, 12, 16, 24),
          children: [
            // ===== ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå =====
            Container(
              padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 16),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Column(
                children: [
                  Container(
                    width: 64,
                    height: 64,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: SvgPicture.asset(
                      'assets/fileupload.svg',
                      width: 36,
                      height: 36,
                    ),
                  ),
                  const SizedBox(height: 12),
                  const Text(
                    '‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: _ink,
                    ),
                  ),
                  const SizedBox(height: 8),
                  CustomButton(
                    text: _picked == null ? '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå' : '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå',
                    onPressed: _pickFile,
                    backgroundColor: const Color(0xFFA6CAFA), // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                    textColor: _ink, // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
                    fontSize: 15,
                  ),
                ],
              ),
            ),
            const SizedBox(height: 24),

            // ===== ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ =====
            const Padding(
              padding: EdgeInsets.only(bottom: 8),
              child: Text(
                '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤',
                style: TextStyle(fontWeight: FontWeight.w600, color: _ink),
              ),
            ),
            Container(
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border.all(color: const Color(0xFFA6CAFA), width: 1.5),
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.08),
                    blurRadius: 6,
                    spreadRadius: 2,
                    offset: const Offset(0, 3),
                  ),
                ],
              ),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
              child: DropdownButtonHideUnderline(
                child: DropdownButton<String>(
                  value: _leaveType,
                  hint: const Text(
                    '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤',
                    style: TextStyle(color: _hintGrey),
                  ),
                  isExpanded: true,
                  icon: const Icon(Icons.chevron_right, color: _chevronGrey),
                  dropdownColor: Colors.white,
                  items: const [
                    DropdownMenuItem(value: '‡∏•‡∏≤‡∏Å‡∏¥‡∏à', child: Text('‡∏•‡∏≤‡∏Å‡∏¥‡∏à')),
                    DropdownMenuItem(value: '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢', child: Text('‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢')),
                  ],
                  onChanged: (v) => setState(() => _leaveType = v),
                ),
              ),
            ),
            const SizedBox(height: 20),

            // ===== ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤ =====
            const Padding(
              padding: EdgeInsets.only(bottom: 8),
              child: Text(
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤',
                style: TextStyle(fontWeight: FontWeight.w600, color: _ink),
              ),
            ),
            InkWell(
              borderRadius: BorderRadius.circular(16),
              onTap: _pickDate,
              child: Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 18,
                ),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border.all(color: _borderBlue, width: 1.5),
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.08),
                      blurRadius: 6,
                      spreadRadius: 2,
                      offset: const Offset(0, 3),
                    ),
                  ],
                ),
                child: Row(
                  children: [
                    Text(
                      dateText,
                      style: TextStyle(
                        color: _date == null ? _hintGrey : _ink,
                        fontWeight: FontWeight.w500,
                        fontSize: 14,
                      ),
                    ),
                    const Spacer(),
                    const Icon(Icons.chevron_right, color: _chevronGrey),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 20),

            // ===== ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ =====
            const Text(
              '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
              style: TextStyle(fontWeight: FontWeight.w600, color: _ink),
            ),
            const SizedBox(height: 8),
            Container(
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border.all(color: _borderBlue, width: 1.5),
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.08),
                    blurRadius: 6,
                    spreadRadius: 2,
                    offset: const Offset(0, 3),
                  ),
                ],
              ),
              child: TextFormField(
                controller: _noteCtrl,
                maxLines: 4,
                style: const TextStyle(color: _ink, fontSize: 14),
                decoration: const InputDecoration(
                  hintText: '‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)',
                  hintStyle: TextStyle(color: _hintGrey),
                  border: InputBorder.none,
                  contentPadding: EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 16,
                  ),
                ),
              ),
            ),

            const SizedBox(height: 18),

            // ===== ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô =====
            Align(
              alignment: Alignment.centerRight,
              child: CustomButton(
                text: _submitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‚Ä¶' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
                onPressed: _submitting ? null : _submit,
                backgroundColor: const Color(0xFFA6CAFA), // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏°
                textColor: const Color.fromARGB(255, 0, 0, 0),
                fontSize: 15,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
