import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:my_app/models/subject.dart';
import 'package:my_app/student/student_calendar_page.dart';

class StudentCalendarLoader extends StatefulWidget {
  const StudentCalendarLoader({super.key});

  @override
  State<StudentCalendarLoader> createState() => _StudentCalendarLoaderState();
}

class _StudentCalendarLoaderState extends State<StudentCalendarLoader> {
  late Future<Map<DateTime, List<Subject>>> _future;

  @override
  void initState() {
    super.initState();
    _future = _fetchEvents(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API ‡∏à‡∏£‡∏¥‡∏á
  }

  DateTime _normalizeDay(DateTime d) => DateTime.utc(d.year, d.month, d.day);

  Future<Map<DateTime, List<Subject>>> _fetchEvents() async {
    // üîµ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á
    final url = Uri.parse('https://your-server.com/api/schedule');

    final res = await http.get(url);
    if (res.statusCode != 200) {
      throw Exception('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${res.statusCode})');
    }

    final list = jsonDecode(res.body);
    if (list is! List) {
      throw Exception('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô List)');
    }

    final map = <DateTime, List<Subject>>{};
    for (final raw in list) {
      final dateStr = (raw['date'] ?? '').toString();
      if (dateStr.isEmpty) continue;

      final date = _normalizeDay(DateTime.parse(dateStr));
      final subject = Subject(
        title: (raw['title'] ?? '').toString(),
        code: (raw['code'] ?? '').toString(),
        credits: (raw['credits'] ?? '').toString(),
        teacher: (raw['teacher'] ?? '').toString(),
        time: (raw['time'] ?? '').toString(),
        room: (raw['room'] ?? '').toString(),
      );

      map.putIfAbsent(date, () => <Subject>[]).add(subject);
    }

    return map;
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<Map<DateTime, List<Subject>>>(
      future: _future,
      initialData: const <DateTime, List<Subject>>{}, // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ events ‡∏ß‡πà‡∏≤‡∏á
      builder: (context, snap) {
        // ‚ùå ‡∏ñ‡πâ‡∏≤ error: ‡∏¢‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô (events ‡∏ß‡πà‡∏≤‡∏á) ‡πÅ‡∏ï‡πà‡πÇ‡∏ä‡∏ß‡πå‡πÅ‡∏ñ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        if (snap.hasError) {
          // ‡πÉ‡∏ä‡πâ ScaffoldMessenger ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ô‡∏µ‡πâ build ‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ throw during build
          WidgetsBinding.instance.addPostFrameCallback((_) {
            final msg = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${snap.error}';
            ScaffoldMessenger.of(context)
              ..clearSnackBars()
              ..showSnackBar(SnackBar(content: Text(msg)));
          });
        }

        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å (‡πÅ‡∏°‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î)
        final events = snap.data ?? const <DateTime, List<Subject>>{};
        return StudentCalendarPage(
          events: events,
          initialFocusedDay: DateTime.now(),
          // initialSelectedDay ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô ‚Äú‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‚Äù
        );
      },
    );
  }
}
